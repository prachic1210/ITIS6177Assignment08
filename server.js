const express = require('express');
const app = express();
const port = 3000;

const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');
const cors = require('cors');
const bodyParser = require('body-parser');
const {check,body,param,validationResult} = require('express-validator');


const mariadb = require('mariadb');
const pool = mariadb.createPool({
host: 'localhost',
user: 'root',
password: 'root',
database: 'sample',
port:3306,
connectionLimit: 15
})

const options = {
swaggerDefinition: {
info: {
title: 'Company API',
version: '1.0.0',
description: 'Company related API autogenerated by swagger'
},
host: '67.205.174.202:3000',
basePath: '/',
},
apis: ['./server.js'],
};

const specs = swaggerJsdoc(options);

app.use(bodyParser.json());
app.use('/docs', swaggerUi.serve, swaggerUi.setup((specs)));
app.use(cors());

app.get('/',(req,res)=>{
res.send("Using maria db for System Integration class!");
})

// Swagger Definitions
/**
* @swagger
*
* definitions:
*   Food:
*     type: object
*     required:
*       - ITEM_NAME
*       - ITEM_UNIT
*       - COMPANY_ID
*       - ITEM_ID
*     properties:
*       ITEM_NAME:
*         type: string
*       ITEM_UNIT:
*         type: string
*       COMPANY_ID:
*         type: string
*       ITEM_ID:
*         type: string
*   FoodPutData:
*     type: object
*     required:
*       - ITEM_NAME
*       - ITEM_UNIT
*       - COMPANY_ID
*     properties:
*       ITEM_NAME:
*         type: string
*       ITEM_UNIT:
*         type: string
*       COMPANY_ID:
*         type: string
*   FoodPatchData:
*     type: object
*     required:
*       - ITEM_NAME
*     properties:
*       ITEM_NAME:
*         type: string
*/

/**
* @swagger
* /agents:
*  get:
*   description: Return all agents
*   produces:
*      - application/json
*   responses:
*      200:
*        description: Object agents containing array of agents with their details
*/
app.get('/agents',async function(req,res){
let conn;
res.header('Content-type','application/json');
try{
conn =await pool.getConnection();
const rows =await conn.query("Select * from agents");
res.json(rows);
}
catch(err){
console.log(err);
res.status(500).json({
    'error': err
});
}
finally{
if (conn) return conn.end();
}

});

/**
* @swagger
*   description: Return all food
*   produces:
*      - application/json
*   responses:
*      200:
*        description: Object food containing food with details
*/
app.get('/foods',async function(req,res){
let conn;
res.header('Content-type','application/json');
try{
conn =await pool.getConnection();
const rows =await conn.query("Select * from foods");
res.json(rows);
}
catch(err){
console.log(err);
res.status(500).json({
    'error': err
});
}
finally{
if (conn) return conn.end();
}

});

/**
* @swagger
* /agents/{id}:
*  get:
*   description: Return a signle agent with specified id
*   produces:
*      - application/json
*   parameters:
*    - name: id
*      in: path
*      description: ID of agent
*      required: true
*      type: string
*      minlength: 1
*   responses:
*      200:
*        description: Object agents containing an agent details for that specific id
*      400:
*        description: Invalid id supplied
*      404:
*        description: Agent not found
*/
app.get('/agents/:id',[param('id').trim().not().isEmpty().isAlphanumeric().withMessage('ID should be only alphabets and numbers').isLength({min:1, max:6}).withMessage('Length of id should be between minimum 1 and maximum 6').escape()],
async function(req,res){
let conn;
id = req.params.id;
res.header('Content-type','application/json');
const errors = validationResult(req);
console.log(errors);
if(!errors.isEmpty()){
return  res.status(400).json({
      'error': errors.array()
})
}
try{
conn =await pool.getConnection();
const rows =await conn.query("Select * from agents where AGENT_CODE = (?)",[id]);
console.log(rows.length);
if(rows.length == 0){
              res.status(404).json({
              'error': 'Cannot find the given Agent id'
              });
}
else{
res.json(rows);
}
}
catch(err){
console.log(err);
res.status(500).json({
    'error': err
});
}
finally{
if (conn) return conn.end();
}

});

/**
* @swagger
*   description: Return all companies
*   produces:
*      - application/json
*   responses:
*      200:
*        description: Object companies  containing array of companies  with their details
*/
app.get('/companies',async function(req,res){
let conn;
res.header('Content-type','application/json');
try{
conn =await pool.getConnection();
const rows =await conn.query("Select * from company");
res.json(rows);
}
catch(err){
console.log(err);
res.status(500).json({
   'error': err
});
}
finally{
if (conn) return conn.end();
}

});


/**
* @swagger
* /companies/{id}:
*  get:
*   description: Return a signle company with specified id
*   produces:
*      - application/json
*   parameters:
*    - name: id
*      in: path
*      description: ID of company
*      required: true
*      type: string
*   responses:
*      200:
*        description: Object of company containing a single company details for that specific id
*      400:
*        description: Invalid id supplied
*      404:
*        description: Company not found with the specified id
*/
app.get('/companies/:id',[param('id').trim().not().isEmpty().isAlphanumeric().withMessage('ID should have only aplhabets and numbers').isLength({min:1, max:6}).withMessage('Length of id should be between minimum 1 and maximum 6').escape()],
async function(req,res){
let conn;
id = req.params.id;
res.header('Content-type','application/json');
const errors = validationResult(req);
if(!errors.isEmpty()){
return  res.status(400).json({
      'error': errors.array()
})
}
try{
conn =await pool.getConnection();
const rows =await conn.query("Select * from company where COMPANY_ID = (?)",[id]);
if(rows.length == 0){
              res.status(404).json({
              'error': 'Company ID not found'
              });
}
else{
res.json(rows);
}
}
catch(err){
console.log(err);
res.status(500).json({
    'error': err
});
}
finally{
if (conn) return conn.end();
}

});


/**
*  get:
*   description: Return all customerss
*   produces:
*      - application/json
*   responses:
*      200:
*        description: Object agents containing array of customers with their details
*/
app.get('/customers',async function(req,res){
let conn;
res.header('Content-type','application/json');
try{
conn =await pool.getConnection();
const rows =await conn.query("Select * from customer");
res.json(rows);
}
catch(err){
console.log(err);
res.status(500).json({
   'error': err
});
}
finally{
if (conn) return conn.end();
}

});

/**
* @swagger
* /customers/{id}:
*  get:
*   description: Return a single customer with specified id
*   produces:
*      - application/json
*   parameters:
*    - name: id
*      in: path
*      description: ID of customers
*      required: true
*      type: string
*   responses:
*      200:
*        description: Object customers containing a single customer details for that specific id
*      400:
*        description: Invalid id supplied
*      404:
*        description: Customer not found with that id
*/
app.get('/customers/:id',[ param('id').trim().not().isEmpty().isAlphanumeric().withMessage('ID should be numbers and alphabets only').isLength({min:1, max:6}).withMessage('Length of id should be between min 1 and max 6').escape()
],async function(req,res){
    let conn;
    id = req.params.id;
     res.header('Content-type','application/json');
     const errors = validationResult(req);
     if(!errors.isEmpty()){
        return  res.status(400).json({
                'error': errors.array()
        })
     }
     try{
         conn =await pool.getConnection();
         const rows =await conn.query("Select * from customer where CUST_CODE = (?)",[id]);
        if(rows.length == 0){
                res.status(404).json({
                'error': 'Could not find the given customer code'
              });
         }
        else{
            res.json(rows);
        }
     }
     catch(err){
         console.log(err);
         res.status(500).json({
             'error': err
         });
     }
     finally{
         if (conn) return conn.end();
     }

});

/**
* @swagger
* /foods/{id}:
*  put:
*   description: Update food data for the specified id
*   produces:
*      - application/json
*   parameters:
*    - name: id
*      in: path
*      description: ID of food
*      required: true
*      type: string
*    - name: food
*      in: body
*      description: Food that is to be updated
*      required: true
*      schema:
*        $ref: '#/definitions/FoodPutData'
*   responses:
*      200:
*        description: Object food successfully updated
*      400:
*        description: Invalid id supplied
*      500:
*        description: Internal Error
*/
app.put('/foods/:id',[body('ITEM_NAME').trim().not().isEmpty().withMessage('ITEM NAME cannot be empty').escape(),
body('ITEM_UNIT').trim().not().isEmpty().withMessage('ITEM UNIT cannot be empty').escape(),
body('COMPANY_ID').trim().not().isEmpty().withMessage('Company ID cannot be empty').escape(),
param('id').trim().not().isEmpty().withMessage('ID cannot be empty').isAlphanumeric().withMessage('ID should be aplhabets and numbers only').isLength({min:1, max:6}).withMessage('Length of id should be between minimum 1 and maximum 6').escape()

], async function(req,res){
res.header('Content-type','application/json');
const errors = validationResult(req);
if(!errors.isEmpty()){
return  res.status(400).json({
'error': errors.array()
})
}
try{
conn = await pool.getConnection();
let req_body = req.body;
console.log(req_body);
const rows = await conn.query("Update foods SET ITEM_NAME=?, ITEM_UNIT= ?, COMPANY_ID =?  where ITEM_ID =?",[req_body.ITEM_NAME,req_body.ITEM_UNIT,req_body.COMPANY_ID,req.params.id]);
console.log(rows.affectedRows);
if(rows.affectedRows == 0){
  res.status(400).json({
  'error': 'Invalid food code'
  });
}
else{
  res.status(200).end();
}
}
catch(err){
console.log(err);
res.status(500).json({
'error': err
})
}
finally{
if (conn) return conn.end();
}
});

/**
* @swagger
* /foods:
*  post:
*   description: Create food  data
*   produces:
*      - application/json
*   parameters:
*    - name: food
*      in: body
*      description: Food that is to be created
*      required: true
*      schema:
*        $ref: '#/definitions/Food'
*   responses:
*      200:
*        description: Object food successfully created
*      400:
*        description: Bad Request
*      500:
*        description: Internal Error
*/
app.post('/foods',[body('ITEM_NAME').trim().not().isEmpty().withMessage('Item name cannot be empty').escape(),
                      body('ITEM_UNIT').trim().not().isEmpty().withMessage('Item unit cannot be empty').escape(),
                      body('COMPANY_ID').trim().not().isEmpty().withMessage('Company Id cannot be empty').escape(),
                      body('ITEM_ID').trim().not().isEmpty().withMessage('ID cannot be empty').isAlphanumeric().withMessage('ID should be aplhabets and integers only').isLength({min:1, max:6}).withMessage('Length of id should be between minimum 1 and maximum 6').escape()

], async function(req,res){
  res.header('Content-type','application/json');
 const errors = validationResult(req);
console.log(errors.isEmpty());
   if(!errors.isEmpty()){
        return  res.status(400).json({
                'error': errors.array()
        })
   }
        try{
                conn = await pool.getConnection();
                let req_body = req.body;
                console.log(req_body);
                const rows = await conn.query("INSERT INTO foods VALUES (?,?,?,?)",[req_body.ITEM_ID,req_body.ITEM_NAME,req_body.ITEM_UNIT,req_body.COMPANY_ID]);
                res.status(200).end();


        }
        catch(err){
        console.log(err);
        res.status(500).json({
                'error': err
        })
        }
        finally{
         if (conn) return conn.end();
        }
});


/**
* @swagger
* /foods/{id}:
*  patch:
*   description: Update food data for the specified id
*   produces:
*      - application/json
*   parameters:
*    - name: id
*      in: path
*      description: ID of food
*      required: true
*      type: string
*    - name: ITEM_NAME
*      in: body
*      description: Food that is to be updated
*      required: true
*      schema:
*        $ref: '#/definitions/FoodPatchData'
*   responses:
*      200:
*        description: Object food successfully updated
*      400:
*        description: Invalid id supplied
*      500:
*        description: Internal Error
*/
app.patch('/foods/:id',[body('ITEM_NAME').trim().not().isEmpty().withMessage('ID cannot be empty').escape(),

], async function(req,res){
res.header('Content-type','application/json');
const errors = validationResult(req);
if(!errors.isEmpty()){
return  res.status(400).json({
      'error': errors.array()
})
}
try{
      conn = await pool.getConnection();
      let req_body = req.body;
      const rows = await conn.query("Update foods SET ITEM_NAME=?  where ITEM_ID =?",[req_body.ITEM_NAME,req.params.id]);
      if(rows.affectedRows == 0){
              res.status(400).json({
              'error': 'Invalid food code'
              });
      }
      else{
              res.status(200).end();
      }
}
catch(err){
console.log(err);
res.status(500).json({
      'error': err
})
}
finally{
if (conn) return conn.end();
}
});

/**
* @swagger
* /foods/{id}:
*  delete:
*   description: Delete a food record for the specified id
*   produces:
*      - application/json
*   parameters:
*    - name: id
*      in: path
*      description: ID of food
*      required: true
*      type: string
*   responses:
*      200:
*        description: Object food successfully deleted
*      400:
*        description: Invalid id supplied. Bad Request
*      500:
*        description: Internal Error
*/
app.delete('/foods/:id',[ param('id').trim().not().isEmpty().withMessage('ID cannot be empty').isLength({min:1, max:6}).withMessage('Length of id should be between minimum 1 and maximum 6').escape()
], async function(req,res){
const errors = validationResult(req);
if(!errors.isEmpty()){
return  res.status(400).json({
      'error': errors.array()
})
}
res.header('Content-type','application/json');
try{
      conn = await pool.getConnection();
      let req_body = req.body;
      const rows = await conn.query("Delete from foods  where ITEM_ID =?",[req.params.id]);
      if(rows.affectedRows == 0){
              res.status(400).json({
              'error': 'Given Food id is invalid'
              });
      }
      else{
              res.status(200).end();
      }
}
catch(err){
console.log(err);
res.status(500).json({
      'error': err
})
}
finally{
if (conn) return conn.end();
}
})

app.listen(port,()=>{
console.log(`Server is listening on port ${port}`);
})